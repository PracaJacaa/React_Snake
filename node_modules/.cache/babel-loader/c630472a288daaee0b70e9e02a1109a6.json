{"ast":null,"code":"var _jsxFileName = \"/workspace/React_Snake/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Grid from \"./constructors/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gridSize: [9, 9],\n      snake: [],\n      apple: []\n    };\n  }\n\n  getRandomApple(gridSize) {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1];\n    let xApple = parsethis.props.apple[Math.floor(Math.random() * this.props.gridSize.length)];\n    let yApple = this.props.apple[Math.floor(Math.random() * this.props.gridSize.length)];\n    return [xApple, yApple];\n  }\n\n  getMiddleOfCordsSnake(gridSize) {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1];\n    let xMiddle = parseInt(xSize / 2);\n    let yMiddle = parseInt(ySize / 2);\n    return [xMiddle, yMiddle];\n  }\n\n  componentDidMount() {\n    let ValofmiddleCoordinates = this.getMiddleOfCordsSnake(this.state.gridSize);\n    this.setState({\n      snake: ValofmiddleCoordinates\n    });\n  }\n\n  componentDidMount() {\n    let ValofrandomApple = this.getRandomApple(this.state.gridSize);\n    this.setState({\n      apple: ValofrandomApple\n    });\n  }\n\n  Randomfood() {\n    let apple = this.props.apple[Math.floor(Math.random() * gameGrid.length)];\n    console.log(apple);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      grid: this.props.gameGrid,\n      snake: this.state.snake,\n      apple: this.state.apple\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 66,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/workspace/React_Snake/src/index.js"],"names":["React","ReactDOM","Grid","Game","Component","constructor","props","state","gridSize","snake","apple","getRandomApple","xSize","ySize","xApple","parsethis","Math","floor","random","length","yApple","getMiddleOfCordsSnake","xMiddle","parseInt","yMiddle","componentDidMount","ValofmiddleCoordinates","setState","ValofrandomApple","Randomfood","gameGrid","console","log","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;;AAEA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAY;AACRC,MAAAA,QAAQ,EAAC,CAAC,CAAD,EAAG,CAAH,CADD;AAERC,MAAAA,KAAK,EAAC,EAFE;AAGRC,MAAAA,KAAK,EAAC;AAHE,KAAZ;AAKH;;AAEDC,EAAAA,cAAc,CAACH,QAAD,EAAU;AACpB,QAAII,KAAK,GAAGJ,QAAQ,CAAC,CAAD,CAApB;AACA,QAAIK,KAAK,GAAGL,QAAQ,CAAC,CAAD,CAApB;AAEA,QAAIM,MAAM,GAAGC,SAAS,CAACT,KAAV,CAAgBI,KAAhB,CAAsBM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAKZ,KAAL,CAAWE,QAAX,CAAoBW,MAA7C,CAAtB,CAAb;AACA,QAAIC,MAAM,GAAG,KAAKd,KAAL,CAAWI,KAAX,CAAiBM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAKZ,KAAL,CAAWE,QAAX,CAAoBW,MAA7C,CAAjB,CAAb;AAEA,WAAO,CAACL,MAAD,EAAQM,MAAR,CAAP;AACH;;AAEDC,EAAAA,qBAAqB,CAACb,QAAD,EAAU;AAC3B,QAAII,KAAK,GAAGJ,QAAQ,CAAC,CAAD,CAApB;AACA,QAAIK,KAAK,GAAGL,QAAQ,CAAC,CAAD,CAApB;AAEA,QAAIc,OAAO,GAAGC,QAAQ,CAACX,KAAK,GAAG,CAAT,CAAtB;AACA,QAAIY,OAAO,GAAGD,QAAQ,CAACV,KAAK,GAAG,CAAT,CAAtB;AAEA,WAAO,CAACS,OAAD,EAAUE,OAAV,CAAP;AAEH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,sBAAsB,GAAG,KAAKL,qBAAL,CAA2B,KAAKd,KAAL,CAAWC,QAAtC,CAA7B;AACA,SAAKmB,QAAL,CAAc;AAAElB,MAAAA,KAAK,EAAEiB;AAAT,KAAd;AACD;;AAEHD,EAAAA,iBAAiB,GAAE;AACf,QAAIG,gBAAgB,GAAG,KAAKjB,cAAL,CAAoB,KAAKJ,KAAL,CAAWC,QAA/B,CAAvB;AACA,SAAKmB,QAAL,CAAc;AAAEjB,MAAAA,KAAK,EAAEkB;AAAT,KAAd;AACH;;AAGDC,EAAAA,UAAU,GAAE;AACR,QAAInB,KAAK,GAAG,KAAKJ,KAAL,CAAWI,KAAX,CAAiBM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcY,QAAQ,CAACX,MAAlC,CAAjB,CAAZ;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAZ;AACH;;AAEDuB,EAAAA,MAAM,GAAI;AAEN,wBACQ,QAAC,IAAD;AACI,MAAA,IAAI,EAAE,KAAK3B,KAAL,CAAWwB,QADrB;AAEI,MAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWE,KAFtB;AAGI,MAAA,KAAK,EAAE,KAAKF,KAAL,CAAWG;AAHtB;AAAA;AAAA;AAAA;AAAA,YADR;AAOH;;AAxD6B;;AA4DlCT,QAAQ,CAACgC,MAAT,eAAgB,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Grid from \"./constructors/Grid\";\n\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            gridSize:[9,9],\n            snake:[],\n            apple:[],\n        };\n    }\n\n    getRandomApple(gridSize){\n        let xSize = gridSize[0]\n        let ySize = gridSize[1]\n\n        let xApple = parsethis.props.apple[Math.floor(Math.random()*this.props.gridSize.length)];\n        let yApple = this.props.apple[Math.floor(Math.random()*this.props.gridSize.length)];\n\n        return [xApple,yApple]\n    }\n\n    getMiddleOfCordsSnake(gridSize){\n        let xSize = gridSize[0]\n        let ySize = gridSize[1]\n\n        let xMiddle = parseInt(xSize / 2);\n        let yMiddle = parseInt(ySize / 2);\n\n        return [xMiddle, yMiddle];\n\n    }\n\n    componentDidMount() {\n        let ValofmiddleCoordinates = this.getMiddleOfCordsSnake(this.state.gridSize);\n        this.setState({ snake: ValofmiddleCoordinates });\n      }\n    \n    componentDidMount(){\n        let ValofrandomApple = this.getRandomApple(this.state.gridSize);\n        this.setState({ apple: ValofrandomApple });\n    }\n\n\n    Randomfood(){\n        let apple = this.props.apple[Math.floor(Math.random()*gameGrid.length)];\n        console.log(apple);\n    }\n\n    render () {\n\n        return (\n                <Grid \n                    grid={this.props.gameGrid}\n                    snake={this.state.snake}\n                    apple={this.state.apple}\n                />\n               )\n    } \n\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n"]},"metadata":{},"sourceType":"module"}