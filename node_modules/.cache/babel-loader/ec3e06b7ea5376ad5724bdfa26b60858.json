{"ast":null,"code":"var _jsxFileName = \"/workspace/React_Snake/src/index.js\";\n\n/*import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction arraysEqual(arrayOne, arrayTwo) {\n    // Compare the size\n    if (arrayOne.length !== arrayTwo.length) {\n      return false;\n    }\n  \n    // Compare the content\n    for (var i = 0; i < arrayOne.length; i++) {\n      if (arrayOne[i] != arrayTwo[i]) {\n        return false;\n      }\n    }\n  \n    return true;\n  }\n\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            gridSize:[7,7],\n            snake:[],\n            food:[],\n        }\n    }\n\n    render () {\n\n        return (\n                <Grid \n                    grid={this.props.gameGrid}\n                />\n               )\n    } \n\n}\n\nclass Grid extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    render() {\n        const gameGrid = Array(7).fill(Array(7).fill(null));  \n            \n            return (\n                <div className=\"xGrid\">\n                    {gameGrid.map((gridX,XIndex) => {\n                        return(\n                        <div className=\"yGrid\">\n                            {gridX.map((gridY,YIndex) => {\n                               return <Tile X={XIndex} Y={YIndex} />\n                            })}\n                        </div>\n                        )\n                    }\n                    )}\n                </div>\n            )              \n    }\n\n}\n\nclass Tile extends React.Component{\n    constructor(props){\n        super(props);\n        \n    }\n    \n    render(){\n        let isFood = arraysEqual(this.props.food, [this.props.X, this.props.Y])\n        ? \"food\"\n        : \"\";\n      let isSnake = arraysEqual(this.props.snake, [this.props.X, this.props.Y])\n        ? \"snake\"\n        : \"\";\n      let className = `tile ${isSnake} ${isFood}`;\n        return <div className={className}>{`X ${this.props.X} - Y ${this.props.Y}`}</div>\n\n\n    }\n}\n\n\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n*/\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\"; // This function compare the content of two arrays\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction arraysEqual(arrayOne, arrayTwo) {\n  // Compare the size\n  if (arrayOne.length !== arrayTwo.length) {\n    return false;\n  } // Compare the content\n\n\n  for (var i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] != arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    // Check if the tile coordinates are equal to the input properties\n    // this.props.snake and this.props.food are coordinates\n    let isFood = arraysEqual(this.props.food, [this.props.X, this.props.Y]) ? \"food\" : \"\";\n    let isSnake = arraysEqual(this.props.snake, [this.props.X, this.props.Y]) ? \"snake\" : \"\";\n    let className = `tile ${isSnake} ${isFood}`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      children: [\"(\", this.props.X, \", \", this.props.Y, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Grid extends React.Component {\n  render() {\n    // Create and display a grid\n    const grid = Array(this.props.size[0]).fill(Array(this.props.size[1]).fill(null));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((gridX, xIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-row\",\n          children: gridX.map((gridY, yIndex) => {\n            // Each tile will have a X and Y coordinates equal to the indexes\n            // of the arrays we're iterating\n            return /*#__PURE__*/_jsxDEV(Tile, {\n              X: xIndex,\n              Y: yIndex,\n              snake: this.props.snake,\n              food: this.props.food\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gridSize: [7, 7],\n      snake: [],\n      food: []\n    };\n  } // Return the middle of the grid represented like an array\n  // [3, 3] (x, y)\n  // The gridSize input is an array\n\n\n  getMiddleGrid(gridSize) {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1]; // parseInt is a function to get the integer part of float number\n    // e.g. 3.5 (float) ==> 3 (int)\n\n    let xMiddle = parseInt(xSize / 2);\n    let yMiddle = parseInt(ySize / 2);\n    return [xMiddle, yMiddle];\n  } // Lifecycle method of React component\n\n\n  componentDidMount() {\n    let middleCoordinates = this.getMiddleGrid(this.state.gridSize);\n    this.setState({\n      snake: middleCoordinates\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        size: this.state.gridSize,\n        snake: this.state.snake,\n        food: this.state.food\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 213,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/workspace/React_Snake/src/index.js"],"names":["React","ReactDOM","arraysEqual","arrayOne","arrayTwo","length","i","Tile","Component","constructor","props","render","isFood","food","X","Y","isSnake","snake","className","Grid","grid","Array","size","fill","map","gridX","xIndex","gridY","yIndex","Game","state","gridSize","getMiddleGrid","xSize","ySize","xMiddle","parseInt","yMiddle","componentDidMount","middleCoordinates","setState","document","getElementById"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP,C,CAEA;;;;;AACA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,QAA/B,EAAyC;AACvC;AACA,MAAID,QAAQ,CAACE,MAAT,KAAoBD,QAAQ,CAACC,MAAjC,EAAyC;AACvC,WAAO,KAAP;AACD,GAJsC,CAMvC;;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACE,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;AACxC,QAAIH,QAAQ,CAACG,CAAD,CAAR,IAAeF,QAAQ,CAACE,CAAD,CAA3B,EAAgC;AAC9B,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAED,MAAMC,IAAN,SAAmBP,KAAK,CAACQ,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA;AACA,QAAIC,MAAM,GAAGV,WAAW,CAAC,KAAKQ,KAAL,CAAWG,IAAZ,EAAkB,CAAC,KAAKH,KAAL,CAAWI,CAAZ,EAAe,KAAKJ,KAAL,CAAWK,CAA1B,CAAlB,CAAX,GACT,MADS,GAET,EAFJ;AAGA,QAAIC,OAAO,GAAGd,WAAW,CAAC,KAAKQ,KAAL,CAAWO,KAAZ,EAAmB,CAAC,KAAKP,KAAL,CAAWI,CAAZ,EAAe,KAAKJ,KAAL,CAAWK,CAA1B,CAAnB,CAAX,GACV,OADU,GAEV,EAFJ;AAGA,QAAIG,SAAS,GAAI,QAAOF,OAAQ,IAAGJ,MAAO,EAA1C;AAEA,wBACE;AAAK,MAAA,SAAS,EAAEM,SAAhB;AAAA,sBACI,KAAKR,KAAL,CAAWI,CADf,QACoB,KAAKJ,KAAL,CAAWK,CAD/B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AArBgC;;AAwBnC,MAAMI,IAAN,SAAmBnB,KAAK,CAACQ,SAAzB,CAAmC;AACjCG,EAAAA,MAAM,GAAG;AACP;AACA,UAAMS,IAAI,GAAGC,KAAK,CAAC,KAAKX,KAAL,CAAWY,IAAX,CAAgB,CAAhB,CAAD,CAAL,CAA0BC,IAA1B,CACXF,KAAK,CAAC,KAAKX,KAAL,CAAWY,IAAX,CAAgB,CAAhB,CAAD,CAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CADW,CAAb;AAGA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBACGH,IAAI,CAACI,GAAL,CAAS,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3B,4BACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,oBACGD,KAAK,CAACD,GAAN,CAAU,CAACG,KAAD,EAAQC,MAAR,KAAmB;AAC5B;AACA;AACA,gCACE,QAAC,IAAD;AACE,cAAA,CAAC,EAAEF,MADL;AAEE,cAAA,CAAC,EAAEE,MAFL;AAGE,cAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWO,KAHpB;AAIE,cAAA,IAAI,EAAE,KAAKP,KAAL,CAAWG;AAJnB;AAAA;AAAA;AAAA;AAAA,oBADF;AAQD,WAXA;AADH;AAAA;AAAA;AAAA;AAAA,gBADF;AAgBD,OAjBA;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAsBD;;AA5BgC;;AA+BnC,MAAMgB,IAAN,SAAmB7B,KAAK,CAACQ,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKoB,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,CADC;AAEXd,MAAAA,KAAK,EAAE,EAFI;AAGXJ,MAAAA,IAAI,EAAE;AAHK,KAAb;AAKD,GARgC,CAUjC;AACA;AACA;;;AACAmB,EAAAA,aAAa,CAACD,QAAD,EAAW;AACtB,QAAIE,KAAK,GAAGF,QAAQ,CAAC,CAAD,CAApB;AACA,QAAIG,KAAK,GAAGH,QAAQ,CAAC,CAAD,CAApB,CAFsB,CAItB;AACA;;AACA,QAAII,OAAO,GAAGC,QAAQ,CAACH,KAAK,GAAG,CAAT,CAAtB;AACA,QAAII,OAAO,GAAGD,QAAQ,CAACF,KAAK,GAAG,CAAT,CAAtB;AAEA,WAAO,CAACC,OAAD,EAAUE,OAAV,CAAP;AACD,GAvBgC,CAyBjC;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,iBAAiB,GAAG,KAAKP,aAAL,CAAmB,KAAKF,KAAL,CAAWC,QAA9B,CAAxB;AACA,SAAKS,QAAL,CAAc;AAAEvB,MAAAA,KAAK,EAAEsB;AAAT,KAAd;AACD;;AAED5B,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE,QAAC,IAAD;AACE,QAAA,IAAI,EAAE,KAAKmB,KAAL,CAAWC,QADnB;AAEE,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWb,KAFpB;AAGE,QAAA,IAAI,EAAE,KAAKa,KAAL,CAAWjB;AAHnB;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AASD;;AAzCgC;;AA4CnCZ,QAAQ,CAACU,MAAT,eAAgB,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA0B8B,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B","sourcesContent":["/*import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction arraysEqual(arrayOne, arrayTwo) {\n    // Compare the size\n    if (arrayOne.length !== arrayTwo.length) {\n      return false;\n    }\n  \n    // Compare the content\n    for (var i = 0; i < arrayOne.length; i++) {\n      if (arrayOne[i] != arrayTwo[i]) {\n        return false;\n      }\n    }\n  \n    return true;\n  }\n\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            gridSize:[7,7],\n            snake:[],\n            food:[],\n        }\n    }\n\n    render () {\n\n        return (\n                <Grid \n                    grid={this.props.gameGrid}\n                />\n               )\n    } \n\n}\n\nclass Grid extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    render() {\n        const gameGrid = Array(7).fill(Array(7).fill(null));  \n            \n            return (\n                <div className=\"xGrid\">\n                    {gameGrid.map((gridX,XIndex) => {\n                        return(\n                        <div className=\"yGrid\">\n                            {gridX.map((gridY,YIndex) => {\n                               return <Tile X={XIndex} Y={YIndex} />\n                            })}\n                        </div>\n                        )\n                    }\n                    )}\n                </div>\n            )              \n    }\n\n}\n\nclass Tile extends React.Component{\n    constructor(props){\n        super(props);\n        \n    }\n    \n    render(){\n        let isFood = arraysEqual(this.props.food, [this.props.X, this.props.Y])\n        ? \"food\"\n        : \"\";\n      let isSnake = arraysEqual(this.props.snake, [this.props.X, this.props.Y])\n        ? \"snake\"\n        : \"\";\n      let className = `tile ${isSnake} ${isFood}`;\n        return <div className={className}>{`X ${this.props.X} - Y ${this.props.Y}`}</div>\n\n\n    }\n}\n\n\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n*/\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\n// This function compare the content of two arrays\nfunction arraysEqual(arrayOne, arrayTwo) {\n  // Compare the size\n  if (arrayOne.length !== arrayTwo.length) {\n    return false;\n  }\n\n  // Compare the content\n  for (var i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] != arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    // Check if the tile coordinates are equal to the input properties\n    // this.props.snake and this.props.food are coordinates\n    let isFood = arraysEqual(this.props.food, [this.props.X, this.props.Y])\n      ? \"food\"\n      : \"\";\n    let isSnake = arraysEqual(this.props.snake, [this.props.X, this.props.Y])\n      ? \"snake\"\n      : \"\";\n    let className = `tile ${isSnake} ${isFood}`;\n\n    return (\n      <div className={className}>\n        ({this.props.X}, {this.props.Y})\n      </div>\n    );\n  }\n}\n\nclass Grid extends React.Component {\n  render() {\n    // Create and display a grid\n    const grid = Array(this.props.size[0]).fill(\n      Array(this.props.size[1]).fill(null)\n    );\n    return (\n      <div className=\"grid\">\n        {grid.map((gridX, xIndex) => {\n          return (\n            <div className=\"grid-row\">\n              {gridX.map((gridY, yIndex) => {\n                // Each tile will have a X and Y coordinates equal to the indexes\n                // of the arrays we're iterating\n                return (\n                  <Tile\n                    X={xIndex}\n                    Y={yIndex}\n                    snake={this.props.snake}\n                    food={this.props.food}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gridSize: [7, 7],\n      snake: [],\n      food: [],\n    };\n  }\n\n  // Return the middle of the grid represented like an array\n  // [3, 3] (x, y)\n  // The gridSize input is an array\n  getMiddleGrid(gridSize) {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1];\n\n    // parseInt is a function to get the integer part of float number\n    // e.g. 3.5 (float) ==> 3 (int)\n    let xMiddle = parseInt(xSize / 2);\n    let yMiddle = parseInt(ySize / 2);\n\n    return [xMiddle, yMiddle];\n  }\n\n  // Lifecycle method of React component\n  componentDidMount() {\n    let middleCoordinates = this.getMiddleGrid(this.state.gridSize);\n    this.setState({ snake: middleCoordinates });\n  }\n\n  render() {\n    return (\n      <>\n        <Grid\n          size={this.state.gridSize}\n          snake={this.state.snake}\n          food={this.state.food}\n        />\n      </>\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));"]},"metadata":{},"sourceType":"module"}