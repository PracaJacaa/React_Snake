{"ast":null,"code":"var _jsxFileName = \"/workspace/React_Snake/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Grid from \"./constructors/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fnInterval = setInterval(() => {\n      gametick();\n    }, 500);\n    this.state = {\n      gridSize: [9, 9],\n      snake: [],\n      apple: [],\n      movmentTo: \"up\",\n      time: 0\n    };\n  } // Howtomove(){\n  //     window.addEventListener('W', handleKey());\n  //     window.addEventListener('A', handleKey());\n  //     window.addEventListener('S', handleKey());\n  //     window.addEventListener('D', handleKey());\n  //     handleKey =(event)=>{\n  //         if(event.key === 'W'){\n  //             console.log('w')\n  //           }\n  //     }\n  // }\n\n\n  gametick() {\n    let hedSnake = [];\n    let tmp = 0;\n    const gridSizX = this.state.gridSize[0];\n    const gridSizY = this.state.gridSize[1];\n\n    switch (this.state.movmentTo) {\n      case \"up\":\n        tmp = this.state.snake[0] - 1 < 0 ? this.state.gridSize[0] - 1 : this.state.snake[0] - 1;\n        hedSnake = [tmp, this.state.snake[1]];\n        break;\n\n      case \"down\":\n        tmp = (this.state.snake[0] + 1) % this.state.gridSize[0];\n        hedSnake = [tmp, this.state.snake[1]];\n        break;\n\n      case \"left\":\n        tmp = this.state.snake[1] - 1 < 0 ? this.state.gridSize[1] - 1 : this.state.snake[1] - 1;\n        hedSnake = [this.state.snake[0], tmp];\n        break;\n\n      case \"right\":\n        tmp = (this.state.snake[1] + 1) % this.state.gridSize[0];\n        hedSnake = [this.state.snake[0], tmp];\n        break;\n\n      default:\n        hedSnake = [parseInt(this.state.gridSize[0] / 2), parseInt(this.state.gridSize[1] / 2)];\n    }\n\n    this.setState({\n      snake: newSnake,\n      time: this.state.time + 1\n    });\n  }\n\n  getRandomApple(gridSize) {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1];\n    let xApple = Math.floor(Math.random() * xSize);\n    let yApple = Math.floor(Math.random() * ySize);\n    let xSnake = this.state.snake[0];\n    let ySnake = this.state.snake[1];\n\n    if (xApple === xSnake && yApple === ySnake) {\n      return this.getRandomApple(gridSize);\n    } else {\n      return [xApple, yApple];\n    }\n  }\n\n  getMiddleOfCordsSnake(gridSize) {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1];\n    let xMiddle = parseInt(xSize / 2);\n    let yMiddle = parseInt(ySize / 2);\n    return [xMiddle, yMiddle];\n  }\n\n  componentDidMount() {\n    let ValofmiddleCoordinates = this.getMiddleOfCordsSnake(this.state.gridSize);\n    this.setState({\n      snake: ValofmiddleCoordinates\n    });\n    let ValofrandomApple = this.getRandomApple(this.state.gridSize);\n    this.setState({\n      apple: ValofrandomApple\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      grid: this.props.gameGrid,\n      snake: this.state.snake,\n      apple: this.state.apple\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 118,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/workspace/React_Snake/src/index.js"],"names":["React","ReactDOM","Grid","Game","Component","constructor","props","fnInterval","setInterval","gametick","state","gridSize","snake","apple","movmentTo","time","hedSnake","tmp","gridSizX","gridSizY","parseInt","setState","newSnake","getRandomApple","xSize","ySize","xApple","Math","floor","random","yApple","xSnake","ySnake","getMiddleOfCordsSnake","xMiddle","yMiddle","componentDidMount","ValofmiddleCoordinates","ValofrandomApple","render","gameGrid","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Grid from \"./constructors/Grid\";\n\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            gridSize:[9,9],\n            snake:[],\n            apple:[],\n            movmentTo: \"up\",\n            time:0\n        };\n    }\n\n    // Howtomove(){\n    //     window.addEventListener('W', handleKey());\n    //     window.addEventListener('A', handleKey());\n    //     window.addEventListener('S', handleKey());\n    //     window.addEventListener('D', handleKey());\n\n    //     handleKey =(event)=>{\n    //         if(event.key === 'W'){\n    //             console.log('w')\n    //           }\n            \n    //     }\n    // }\n    fnInterval = setInterval(() => {\n        gametick();\n    }, 500);\n\n    gametick(){\n        let hedSnake =[];\n        let tmp = 0;\n        const gridSizX = this.state.gridSize[0];\n        const gridSizY = this.state.gridSize[1];\n\n        switch(this.state.movmentTo){           \n            \n            case \"up\":\n                tmp = this.state.snake[0] - 1 < 0? this.state.gridSize[0] - 1 :this.state.snake[0] - 1;\n                hedSnake= [tmp, this.state.snake[1] ];\n                break;\n            case \"down\":\n                tmp = (this.state.snake[0] + 1) % this.state.gridSize[0];\n                hedSnake = [tmp, this.state.snake[1] ];\n                break;\n            case \"left\":\n                tmp = this.state.snake[1] - 1 < 0? this.state.gridSize[1] - 1 :this.state.snake[1] - 1;\n                hedSnake = [this.state.snake[0], tmp ];\n                break;\n            case \"right\":\n                tmp = (this.state.snake[1] + 1) % this.state.gridSize[0];\n                hedSnake = [this.state.snake[0], tmp ];\n                break;\n\n                default:\n                    hedSnake = [parseInt(this.state.gridSize[0]/2), parseInt(this.state.gridSize[1]/2)];\n            }\n        this.setState({snake: newSnake, time: this.state.time + 1});\n    }\n\n    getRandomApple(gridSize){\n        let xSize = gridSize[0]\n        let ySize = gridSize[1]\n\n        let xApple = Math.floor(Math.random()*xSize);\n        let yApple = Math.floor(Math.random()*ySize);\n\n        let xSnake = this.state.snake[0];\n        let ySnake = this.state.snake[1];\n\n        if(xApple === xSnake && yApple === ySnake){\n            return this.getRandomApple(gridSize)\n        }\n        else {\n            return [xApple,yApple]\n        }\n    }\n\n\n    getMiddleOfCordsSnake(gridSize){\n        let xSize = gridSize[0]\n        let ySize = gridSize[1]\n\n        let xMiddle = parseInt(xSize / 2);\n        let yMiddle = parseInt(ySize / 2);\n\n        return [xMiddle, yMiddle];\n\n    }\n\n    componentDidMount() {\n        let ValofmiddleCoordinates = this.getMiddleOfCordsSnake(this.state.gridSize);\n        this.setState({ snake: ValofmiddleCoordinates });\n\n        let ValofrandomApple = this.getRandomApple(this.state.gridSize);\n        this.setState({ apple: ValofrandomApple });\n      }\n\n\n    render () {\n\n        return (\n                <Grid \n                    grid={this.props.gameGrid}\n                    snake={this.state.snake}\n                    apple={this.state.apple}\n                />\n               )\n    } \n\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n"]},"metadata":{},"sourceType":"module"}