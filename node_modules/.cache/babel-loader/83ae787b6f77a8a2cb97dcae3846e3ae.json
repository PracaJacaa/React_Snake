{"ast":null,"code":"var _jsxFileName = \"/workspace/React_Snake/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Grid from \"./constructors/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction arrayEqual(arryOne, arrayTwo) {\n  if (arryOne.length !== arrayTwo.length) {\n    return false;\n  }\n\n  for (var i = 0; i < arryOne.length; i++) {\n    if (arryOne[i] != arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gridSize: [9, 9],\n      snake: [],\n      snakeBody: [],\n      apple: [],\n      movmentTo: \"up\",\n      time: 0,\n      points: 1\n    };\n  }\n\n  Crash() {\n    let cordsnake = this.state.snake;\n    let cordapple = this.state.apple;\n    let points = this.state.points;\n\n    if (arrayEqual(cordsnake, cordapple)) {\n      console.log(\"crash\");\n      this.setState({\n        points: points + 1\n      });\n      this.getRandomApple();\n    }\n  }\n\n  Howtomove(event) {\n    console.log(event);\n    const keyCode = event.code;\n\n    switch (keyCode) {\n      case \"KeyW\":\n        this.setState({\n          movmentTo: \"up\"\n        });\n        break;\n\n      case \"KeyS\":\n        this.setState({\n          movmentTo: \"down\"\n        });\n        break;\n\n      case \"KeyA\":\n        this.setState({\n          movmentTo: \"left\"\n        });\n        break;\n\n      case \"KeyD\":\n        this.setState({\n          movmentTo: \"right\"\n        });\n        break;\n    }\n  }\n\n  gametick() {\n    // let xSize = gridSize[0]\n    // let ySize = gridSize[1]\n    let xSnakePosition = this.state.snake[0];\n    let ySnakePosition = this.state.snake[1];\n\n    switch (this.state.movmentTo) {\n      // left example\n      case \"left\":\n        var newSnakex = xSnakePosition <= 0 ? 8 : xSnakePosition - 1;\n        this.setState({\n          snake: [newSnakex, ySnakePosition]\n        });\n        console.log(newSnakex, ySnakePosition);\n        break;\n\n      case \"right\":\n        // righ example\n        var newSnakex = xSnakePosition >= 8 ? 0 : xSnakePosition + 1;\n        this.setState({\n          snake: [newSnakex, ySnakePosition]\n        });\n        console.log(newSnakex, ySnakePosition);\n        break;\n\n      case \"down\":\n        var newSnakey = ySnakePosition >= 8 ? 0 : ySnakePosition + 1;\n        this.setState({\n          snake: [xSnakePosition, newSnakey]\n        });\n        console.log(xSnakePosition, newSnakey);\n        break;\n\n      case \"up\":\n        var newSnakey = ySnakePosition <= 0 ? 8 : ySnakePosition - 1;\n        this.setState({\n          snake: [xSnakePosition, newSnakey]\n        });\n        console.log(xSnakePosition, newSnakey);\n        break;\n    }\n  }\n\n  getRandomApple() {\n    let xSize = this.state.gridSize[0];\n    let ySize = this.state.gridSize[1];\n    let xApple = Math.floor(Math.random() * xSize);\n    let yApple = Math.floor(Math.random() * ySize);\n    let xSnake = this.state.snake[0];\n    let ySnake = this.state.snake[1];\n\n    if (xApple === xSnake && yApple === ySnake) {\n      this.setState({\n        snakeBody: [xSnake, ySnake]\n      });\n      console.log(\"Snake Body pos:\" + xSnake, ySnakePosition);\n      return this.getRandomApple();\n    } else {\n      this.setState({\n        apple: [xApple, yApple]\n      });\n    }\n  }\n\n  getMiddleOfCordsSnake(gridSize) {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1];\n    let xMiddle = parseInt(xSize / 2);\n    let yMiddle = parseInt(ySize / 2);\n    return [xMiddle, yMiddle];\n  }\n\n  componentDidMount() {\n    let ValofmiddleCoordinates = this.getMiddleOfCordsSnake(this.state.gridSize);\n    this.setState({\n      snake: ValofmiddleCoordinates\n    });\n    this.getRandomApple();\n    setInterval(() => this.gametick(), 500);\n    setInterval(() => this.Crash(), 501);\n    window.addEventListener('keydown', event => this.Howtomove(event));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      grid: this.props.gameGrid,\n      snake: this.state.snake,\n      apple: this.state.apple,\n      points: this.state.points,\n      snakeHead: this.state.snakeHead\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 169,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/workspace/React_Snake/src/index.js"],"names":["React","ReactDOM","Grid","arrayEqual","arryOne","arrayTwo","length","i","Game","Component","constructor","props","state","gridSize","snake","snakeBody","apple","movmentTo","time","points","Crash","cordsnake","cordapple","console","log","setState","getRandomApple","Howtomove","event","keyCode","code","gametick","xSnakePosition","ySnakePosition","newSnakex","newSnakey","xSize","ySize","xApple","Math","floor","random","yApple","xSnake","ySnake","getMiddleOfCordsSnake","xMiddle","parseInt","yMiddle","componentDidMount","ValofmiddleCoordinates","setInterval","window","addEventListener","render","gameGrid","snakeHead","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Grid from \"./constructors/Grid\";\n\n\nfunction arrayEqual(arryOne,arrayTwo){\n\n    if(arryOne.length !== arrayTwo.length){\n        return false;\n    }\n    for(var i=0 ; i< arryOne.length; i++){\n        if(arryOne[i] != arrayTwo[i]){\n        return false;\n        }\n    }\n    return true\n}\n\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            gridSize:[9,9],\n            snake:[],\n            snakeBody:[],\n            apple:[],\n            movmentTo: \"up\",\n            time:0,\n            points:1\n        };\n    }\n\n    Crash(){\n        let cordsnake = this.state.snake\n        let cordapple = this.state.apple\n        let points = this.state.points\n\n        if(arrayEqual(cordsnake,cordapple)){\n            console.log(\"crash\")\n            this.setState({points: points + 1})\n            this.getRandomApple()\n            ;\n        }\n    };\n\n\n    Howtomove(event){\n        console.log(event);\n        const keyCode = event.code;\n        switch(keyCode){\n            case\"KeyW\":\n                this.setState({movmentTo: \"up\"});\n                break;\n\n            case\"KeyS\":\n            this.setState({movmentTo: \"down\"});\n            break;\n\n            case\"KeyA\":\n            this.setState({movmentTo: \"left\"});\n            break;\n\n            case\"KeyD\":\n            this.setState({movmentTo: \"right\"});\n            break;\n        }\n    }\n\n\n    gametick(){\n        // let xSize = gridSize[0]\n        // let ySize = gridSize[1]\n\n        let xSnakePosition = this.state.snake[0];\n        let ySnakePosition = this.state.snake[1];\n\n        switch(this.state.movmentTo){\n                // left example\n            case \"left\":\n                 var newSnakex = xSnakePosition <= 0 ? 8 : xSnakePosition -1\n                this.setState({snake: [newSnakex, ySnakePosition]});\n                console.log(newSnakex, ySnakePosition)\n            break;\n            case \"right\":\n                // righ example\n                var newSnakex = xSnakePosition >= 8 ? 0 : xSnakePosition +1\n                this.setState({snake: [newSnakex, ySnakePosition]});\n                console.log(newSnakex,ySnakePosition)\n            break;\n            case \"down\":\n                var newSnakey = ySnakePosition >= 8 ? 0 : ySnakePosition +1\n                this.setState({snake: [xSnakePosition, newSnakey]});\n                console.log(xSnakePosition, newSnakey)\n            break;\n            case \"up\":    \n                var newSnakey = ySnakePosition <= 0 ? 8 : ySnakePosition -1\n                this.setState({snake: [xSnakePosition, newSnakey]});\n                console.log(xSnakePosition, newSnakey)\n                break;\n            }\n            \n\n    }\n\n    getRandomApple(){\n        let xSize = this.state.gridSize[0]\n        let ySize = this.state.gridSize[1]\n\n        let xApple = Math.floor(Math.random()*xSize);\n        let yApple = Math.floor(Math.random()*ySize);\n\n        let xSnake = this.state.snake[0];\n        let ySnake = this.state.snake[1];\n\n        if(xApple === xSnake && yApple === ySnake){\n            this.setState({snakeBody: [xSnake, ySnake]});\n            console.log(\"Snake Body pos:\" + xSnake, ySnakePosition )\n            return this.getRandomApple()\n        }\n        else {\n            this.setState({ apple: [xApple,yApple] }); \n        }\n    }\n\n\n    getMiddleOfCordsSnake(gridSize){\n        let xSize = gridSize[0]\n        let ySize = gridSize[1]\n\n        let xMiddle = parseInt(xSize / 2);\n        let yMiddle = parseInt(ySize / 2);\n\n        return [xMiddle, yMiddle];\n\n    }\n\n    componentDidMount() {\n        let ValofmiddleCoordinates = this.getMiddleOfCordsSnake(this.state.gridSize);\n        this.setState({ snake: ValofmiddleCoordinates });\n\n        this.getRandomApple();\n\n\n        setInterval(() => this.gametick(), 500)\n        setInterval(() => this.Crash(), 501)\n        \n\n        window.addEventListener('keydown', (event) => this.Howtomove(event));\n      }\n\n\n\n    render () {\n\n        return (\n                <Grid \n                    grid={this.props.gameGrid}\n                    snake={this.state.snake}\n                    apple={this.state.apple}\n                    points={this.state.points}\n                    snakeHead={this.state.snakeHead}\n                />\n               )\n    } \n\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n"]},"metadata":{},"sourceType":"module"}