{"ast":null,"code":"var _jsxFileName = \"/workspace/React_Snake/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Grid from \"./constructors/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gridSize: [9, 9],\n      snake: [],\n      apple: [],\n      movmentTo: \"up\",\n      time: 0\n    };\n  } // Howtomove(){\n  //     window.addEventListener('W', handleKey());\n  //     window.addEventListener('A', handleKey());\n  //     window.addEventListener('S', handleKey());\n  //     window.addEventListener('D', handleKey());\n  //     handleKey =(event)=>{\n  //         if(event.key === 'W'){\n  //             console.log('w')\n  //           }\n  //     }\n  // }\n\n\n  timeclock() {}\n\n  gametick() {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1];\n    let xSnakePosition = this.state.snake[0];\n    let ySnakePosition = this.state.snake[1];\n\n    switch (this.state.movmentTo) {\n      // left example\n      case \"up\":\n        this.setState({\n          snake: [xSnakePosition - 1, ySnakePosition]\n        });\n        break;\n\n      case \"right\":\n        // righ example\n        this.setState({\n          snake: [xSnakePosition + 1, ySnakePosition]\n        });\n        break;\n\n      case \"down\":\n        //go down example\n        this.setState({\n          snake: [xSnakePosition, ySnakePosition + 1]\n        });\n        break;\n\n      case \"up\":\n        //go up example\n        this.setState({\n          snake: [xSnakePosition, ySnakePosition - 1]\n        });\n        break;\n    }\n  }\n\n  getRandomApple(gridSize) {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1];\n    let xApple = Math.floor(Math.random() * xSize);\n    let yApple = Math.floor(Math.random() * ySize);\n    let xSnake = this.state.snake[0];\n    let ySnake = this.state.snake[1];\n\n    if (xApple === xSnake && yApple === ySnake) {\n      return this.getRandomApple(gridSize);\n    } else {\n      return [xApple, yApple];\n    }\n  }\n\n  getMiddleOfCordsSnake(gridSize) {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1];\n    let xMiddle = parseInt(xSize / 2);\n    let yMiddle = parseInt(ySize / 2);\n    return [xMiddle, yMiddle];\n  }\n\n  componentDidMount() {\n    let ValofmiddleCoordinates = this.getMiddleOfCordsSnake(this.state.gridSize);\n    this.setState({\n      snake: ValofmiddleCoordinates\n    });\n    let ValofrandomApple = this.getRandomApple(this.state.gridSize);\n    this.setState({\n      apple: ValofrandomApple\n    });\n    timeclock();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      grid: this.props.gameGrid,\n      snake: this.state.snake,\n      apple: this.state.apple\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 119,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/workspace/React_Snake/src/index.js"],"names":["React","ReactDOM","Grid","Game","Component","constructor","props","state","gridSize","snake","apple","movmentTo","time","timeclock","gametick","xSize","ySize","xSnakePosition","ySnakePosition","setState","getRandomApple","xApple","Math","floor","random","yApple","xSnake","ySnake","getMiddleOfCordsSnake","xMiddle","parseInt","yMiddle","componentDidMount","ValofmiddleCoordinates","ValofrandomApple","render","gameGrid","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Grid from \"./constructors/Grid\";\n\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            gridSize:[9,9],\n            snake:[],\n            apple:[],\n            movmentTo: \"up\",\n            time:0\n        };\n    }\n\n    // Howtomove(){\n    //     window.addEventListener('W', handleKey());\n    //     window.addEventListener('A', handleKey());\n    //     window.addEventListener('S', handleKey());\n    //     window.addEventListener('D', handleKey());\n\n    //     handleKey =(event)=>{\n    //         if(event.key === 'W'){\n    //             console.log('w')\n    //           }\n            \n    //     }\n    // }\n\n    timeclock(){\n\n    }\n\n    gametick(){\n        let xSize = gridSize[0]\n        let ySize = gridSize[1]\n\n        let xSnakePosition = this.state.snake[0];\n        let ySnakePosition = this.state.snake[1];\n\n\n        switch(this.state.movmentTo){\n                // left example\n            case \"up\":\n                this.setState({snake: [xSnakePosition-1, ySnakePosition]});\n            break;\n            case \"right\":\n                // righ example\n                this.setState({snake: [xSnakePosition+1, ySnakePosition]});\n            break;\n            case \"down\":\n                //go down example\n                this.setState({snake: [xSnakePosition, ySnakePosition+1]});\n            break;\n            case \"up\":    \n                //go up example\n                this.setState({snake: [xSnakePosition, ySnakePosition-1]});\n                break;\n            }\n\n    }\n\n    getRandomApple(gridSize){\n        let xSize = gridSize[0]\n        let ySize = gridSize[1]\n\n        let xApple = Math.floor(Math.random()*xSize);\n        let yApple = Math.floor(Math.random()*ySize);\n\n        let xSnake = this.state.snake[0];\n        let ySnake = this.state.snake[1];\n\n        if(xApple === xSnake && yApple === ySnake){\n            return this.getRandomApple(gridSize)\n        }\n        else {\n            return [xApple,yApple]\n        }\n    }\n\n\n    getMiddleOfCordsSnake(gridSize){\n        let xSize = gridSize[0]\n        let ySize = gridSize[1]\n\n        let xMiddle = parseInt(xSize / 2);\n        let yMiddle = parseInt(ySize / 2);\n\n        return [xMiddle, yMiddle];\n\n    }\n\n    componentDidMount() {\n        let ValofmiddleCoordinates = this.getMiddleOfCordsSnake(this.state.gridSize);\n        this.setState({ snake: ValofmiddleCoordinates });\n\n        let ValofrandomApple = this.getRandomApple(this.state.gridSize);\n        this.setState({ apple: ValofrandomApple });\n\n        timeclock();\n      }\n\n\n    render () {\n\n        return (\n                <Grid \n                    grid={this.props.gameGrid}\n                    snake={this.state.snake}\n                    apple={this.state.apple}\n                />\n               )\n    } \n\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n"]},"metadata":{},"sourceType":"module"}