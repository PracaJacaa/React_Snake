{"ast":null,"code":"var _jsxFileName = \"/workspace/React_Snake/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Grid from \"./constructors/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gridSize: [9, 9],\n      snake: [],\n      apple: [],\n      movmentTo: \"up\",\n      time: 0\n    }; // this.gametick = this.gametick.bind(this);\n  }\n\n  Crash() {\n    const cordsnakeX = this.state.snake[0];\n    const cordsnakeY = this.state.snake[1];\n    const cordappleX = this.state.apple[0];\n    const cordappleY = this.state.apple[1];\n\n    if (cordsnakeX === cordappleX && cordsnakeY === cordappleY) {\n      console.log(\"crash\");\n    }\n  }\n\n  Howtomove(event) {\n    console.log(event);\n    const keyCode = event.code;\n\n    switch (keyCode) {\n      case \"KeyW\":\n        this.setState({\n          movmentTo: \"up\"\n        });\n        break;\n\n      case \"KeyS\":\n        this.setState({\n          movmentTo: \"down\"\n        });\n        break;\n\n      case \"KeyA\":\n        this.setState({\n          movmentTo: \"left\"\n        });\n        break;\n\n      case \"KeyD\":\n        this.setState({\n          movmentTo: \"right\"\n        });\n        break;\n    }\n  }\n\n  gametick() {\n    // let xSize = gridSize[0]\n    // let ySize = gridSize[1]\n    let xSnakePosition = this.state.snake[0];\n    let ySnakePosition = this.state.snake[1];\n\n    switch (this.state.movmentTo) {\n      // left example\n      case \"left\":\n        var newSnakex = xSnakePosition <= 0 ? 8 : xSnakePosition - 1;\n        this.setState({\n          snake: [newSnakex, ySnakePosition]\n        });\n        break;\n\n      case \"right\":\n        // righ example\n        var newSnakex = xSnakePosition >= 6 ? 0 : xSnakePosition + 1;\n        this.setState({\n          snake: [newSnakex, ySnakePosition]\n        });\n        break;\n\n      case \"down\":\n        //go down example\n        this.setState({\n          snake: [xSnakePosition, ySnakePosition + 1]\n        });\n        break;\n\n      case \"up\":\n        //go up example\n        this.setState({\n          snake: [xSnakePosition, ySnakePosition - 1]\n        });\n        break;\n    }\n  }\n\n  getRandomApple(gridSize) {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1];\n    let xApple = Math.floor(Math.random() * xSize);\n    let yApple = Math.floor(Math.random() * ySize);\n    let xSnake = this.state.snake[0];\n    let ySnake = this.state.snake[1];\n\n    if (xApple === xSnake && yApple === ySnake) {\n      return this.getRandomApple(gridSize);\n    } else {\n      return [xApple, yApple];\n    }\n  }\n\n  getMiddleOfCordsSnake(gridSize) {\n    let xSize = gridSize[0];\n    let ySize = gridSize[1];\n    let xMiddle = parseInt(xSize / 2);\n    let yMiddle = parseInt(ySize / 2);\n    return [xMiddle, yMiddle];\n  }\n\n  componentDidMount() {\n    let ValofmiddleCoordinates = this.getMiddleOfCordsSnake(this.state.gridSize);\n    this.setState({\n      snake: ValofmiddleCoordinates\n    });\n    let ValofrandomApple = this.getRandomApple(this.state.gridSize);\n    this.setState({\n      apple: ValofrandomApple\n    });\n    setInterval(() => this.gametick(), 500);\n    window.addEventListener('keydown', event => this.Howtomove(event));\n    this.Crash();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      grid: this.props.gameGrid,\n      snake: this.state.snake,\n      apple: this.state.apple\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 144,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/workspace/React_Snake/src/index.js"],"names":["React","ReactDOM","Grid","Game","Component","constructor","props","state","gridSize","snake","apple","movmentTo","time","Crash","cordsnakeX","cordsnakeY","cordappleX","cordappleY","console","log","Howtomove","event","keyCode","code","setState","gametick","xSnakePosition","ySnakePosition","newSnakex","getRandomApple","xSize","ySize","xApple","Math","floor","random","yApple","xSnake","ySnake","getMiddleOfCordsSnake","xMiddle","parseInt","yMiddle","componentDidMount","ValofmiddleCoordinates","ValofrandomApple","setInterval","window","addEventListener","render","gameGrid","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Grid from \"./constructors/Grid\";\n\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            gridSize:[9,9],\n            snake:[],\n            apple:[],\n            movmentTo: \"up\",\n            time:0\n        };\n        // this.gametick = this.gametick.bind(this);\n\n    }\n\n    Crash(){\n        const cordsnakeX = this.state.snake[0]\n        const cordsnakeY = this.state.snake[1]\n        const cordappleX = this.state.apple[0]\n        const cordappleY = this.state.apple[1]\n\n        if(cordsnakeX === cordappleX && cordsnakeY === cordappleY){\n            console.log(\"crash\")\n        }\n    };\n\n    Howtomove(event){\n        console.log(event);\n        const keyCode = event.code;\n        switch(keyCode){\n            case\"KeyW\":\n                this.setState({movmentTo: \"up\"});\n                break;\n\n            case\"KeyS\":\n            this.setState({movmentTo: \"down\"});\n            break;\n\n            case\"KeyA\":\n            this.setState({movmentTo: \"left\"});\n            break;\n\n            case\"KeyD\":\n            this.setState({movmentTo: \"right\"});\n            break;\n        }\n    }\n\n\n    gametick(){\n        // let xSize = gridSize[0]\n        // let ySize = gridSize[1]\n\n        let xSnakePosition = this.state.snake[0];\n        let ySnakePosition = this.state.snake[1];\n\n\n        switch(this.state.movmentTo){\n                // left example\n            case \"left\":\n                 var newSnakex = xSnakePosition <= 0 ? 8 : xSnakePosition -1\n                this.setState({snake: [newSnakex, ySnakePosition]});\n            break;\n            case \"right\":\n                // righ example\n                var newSnakex = xSnakePosition >= 6 ? 0 : xSnakePosition +1\n                this.setState({snake: [newSnakex, ySnakePosition]});\n            break;\n            case \"down\":\n                //go down example\n                this.setState({snake: [xSnakePosition, ySnakePosition+1]});\n            break;\n            case \"up\":    \n                //go up example\n                this.setState({snake: [xSnakePosition, ySnakePosition-1]});\n                break;\n            }\n\n    }\n\n    getRandomApple(gridSize){\n        let xSize = gridSize[0]\n        let ySize = gridSize[1]\n\n        let xApple = Math.floor(Math.random()*xSize);\n        let yApple = Math.floor(Math.random()*ySize);\n\n        let xSnake = this.state.snake[0];\n        let ySnake = this.state.snake[1];\n\n        if(xApple === xSnake && yApple === ySnake){\n            return this.getRandomApple(gridSize)\n        }\n        else {\n            return [xApple,yApple]\n        }\n    }\n\n\n    getMiddleOfCordsSnake(gridSize){\n        let xSize = gridSize[0]\n        let ySize = gridSize[1]\n\n        let xMiddle = parseInt(xSize / 2);\n        let yMiddle = parseInt(ySize / 2);\n\n        return [xMiddle, yMiddle];\n\n    }\n\n    componentDidMount() {\n        let ValofmiddleCoordinates = this.getMiddleOfCordsSnake(this.state.gridSize);\n        this.setState({ snake: ValofmiddleCoordinates });\n\n        let ValofrandomApple = this.getRandomApple(this.state.gridSize);\n        this.setState({ apple: ValofrandomApple });\n\n        setInterval(() => this.gametick(), 500)\n\n        window.addEventListener('keydown', (event) => this.Howtomove(event));\n\n        this.Crash();\n      }\n\n\n\n    render () {\n\n        return (\n                <Grid \n                    grid={this.props.gameGrid}\n                    snake={this.state.snake}\n                    apple={this.state.apple}\n                />\n               )\n    } \n\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n"]},"metadata":{},"sourceType":"module"}